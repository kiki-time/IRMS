package com.mysite.irms.service;

import com.mysite.irms.entity.Envelope;
import com.mysite.irms.repository.EnvelopeRepository;
import com.mysite.irms.util.AESUtil;
import com.mysite.irms.util.RSAUtil;
import jakarta.annotation.PostConstruct;
import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import java.io.File;
import java.io.FileOutputStream;
import java.security.KeyPair;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.time.LocalDateTime;
import java.util.Base64;
import java.util.UUID;
import javax.crypto.SecretKey;

@Service
@RequiredArgsConstructor
public class EnvelopeService {
	private final EnvelopeRepository envelopeRepository;

    @Value("${file.upload-dir}")
    private String uploadDir;

    private KeyPair keyPair;

    @PostConstruct
    public void init() throws Exception {
        // 서비스 시작 -> RSA 키쌍 생성 (데모용), 나중에 수정 필요
        keyPair = RSAUtil.generateKeyPair();
    }

    public void saveEncryptedEnvelope(MultipartFile file, String username) throws Exception {
        // 파일명 랜덤 처리
        String originalFileName = file.getOriginalFilename();
        String uniqueFileName = UUID.randomUUID().toString() + ".enc";

        // aes 대칭키 생성, 파일 암호화
        SecretKey aesKey = AESUtil.generateKey();
        String fileContent = new String(file.getBytes());
        String encryptedContent = AESUtil.encrypt(fileContent, aesKey);

        // 서명 생성, 암호화된 데이터 기반
        String signature = RSAUtil.signData(encryptedContent, keyPair.getPrivate());

        // aes 키를 rsa 공개키로 암호화
        String encodedAESKey = AESUtil.encodeKeyToBase64(aesKey);
        String aesKeyEncrypted = Base64.getEncoder().encodeToString(
                keyPair.getPublic().encrypt(encodedAESKey.getBytes(), null) // Pseudocode – Java RSA doesn't encrypt like this
        );

        // 파일 저장
        File folder = new File(uploadDir + "/" + username);
        if (!folder.exists()) folder.mkdirs();

        File targetFile = new File(folder, uniqueFileName);
        try (FileOutputStream fos = new FileOutputStream(targetFile)) {
            fos.write(encryptedContent.getBytes());
        }

        // DB 저장
        Envelope envelope = Envelope.builder()
                .originalFileName(originalFileName)
                .storedFileName("envelopes/" + username + "/" + uniqueFileName)
                .uploaderUsername(username)
                .uploadTime(LocalDateTime.now())
                .signature(signature)
                .aesKeyEncrypted(aesKeyEncrypted)
                .build();

        envelopeRepository.save(envelope);
    }
}
