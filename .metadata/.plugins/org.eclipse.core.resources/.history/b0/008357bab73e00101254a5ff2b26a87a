package com.mysite.irms.service;

import com.mysite.irms.dto.EnvelopeTransferRequest;
import com.mysite.irms.entity.Envelope;
import com.mysite.irms.entity.KeyPairEntity;
import com.mysite.irms.entity.User;
import com.mysite.irms.repository.EnvelopeRepository;
import com.mysite.irms.repository.KeyRepository;
import com.mysite.irms.repository.UserRepository;
import com.mysite.irms.util.AESUtil;
import com.mysite.irms.util.RSAUtil;
import jakarta.annotation.PostConstruct;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import java.io.File;
import java.io.FileOutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.KeyPair;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.time.LocalDateTime;
import java.util.Base64;
import java.util.List;
import java.util.UUID;
import javax.crypto.SecretKey;

@Service
@RequiredArgsConstructor
public class EnvelopeService {
	private final EnvelopeRepository envelopeRepository;
	private final KeyRepository keyRepository;
	private final UserRepository userRepository;

	@Value("${file.upload-dir}")
	private String uploadDir;

	private KeyPair keyPair;

	@PostConstruct
	public void init() throws Exception {
		keyPair = RSAUtil.generateKeyPair();
	}

	public void saveEncryptedEnvelope(MultipartFile file, String username) throws Exception {
		User user = userRepository.findByUsername(username).orElseThrow(() -> new RuntimeException("사용자를 찾을 수 없습니다."));

		KeyPairEntity keyPairEntity = keyRepository.findByUser(user)
				.orElseThrow(() -> new RuntimeException("키쌍이 존재하지 않습니다."));

		PublicKey publicKey = RSAUtil.readPublicKeyFromPem(keyPairEntity.getPublicKey());
		PrivateKey privateKey = RSAUtil.readPrivateKeyFromPem(keyPairEntity.getPrivateKey());

		String originalFileName = file.getOriginalFilename();
		String uniqueFileName = UUID.randomUUID().toString() + ".enc";

		// 암호화
		SecretKey aesKey = AESUtil.generateKey();
		String fileContent = new String(file.getBytes());
		String encryptedContent = AESUtil.encrypt(fileContent, aesKey);

		// 서명
		String signature = RSAUtil.signData(encryptedContent, privateKey);

		// AES 키를 공개키로
		String encodedAESKey = AESUtil.encodeKeyToBase64(aesKey);
		String aesKeyEncrypted = RSAUtil.encryptWithPublicKey(encodedAESKey, publicKey);

		File folder = new File(uploadDir + "/" + username);
		if (!folder.exists())
			folder.mkdirs();

		File targetFile = new File(folder, uniqueFileName);
		try (FileOutputStream fos = new FileOutputStream(targetFile)) {
			fos.write(encryptedContent.getBytes());
		}

		Envelope envelope = Envelope.builder().originalFileName(originalFileName)
				.storedFileName("envelopes/" + username + "/" + uniqueFileName).uploaderUsername(username)
				.uploadTime(LocalDateTime.now()).signature(signature).aesKeyEncrypted(aesKeyEncrypted).build();

		envelopeRepository.save(envelope);
	}

	public ResponseEntity<Resource> downloadFileService(Long envelopeId, String username) throws Exception {
		Envelope envelope = envelopeRepository.findById(envelopeId)
				.orElseThrow(() -> new RuntimeException("해당 봉투를 찾을 수 없습니다."));

		if (!envelope.getUploaderUsername().equals(username)) {
			throw new RuntimeException("해당 파일에 접근 권한이 없습니다.");
		}

		Path filePath = Paths.get(uploadDir).resolve(envelope.getStoredFileName().replace("envelopes/", ""));
		if (!Files.exists(filePath)) {
			throw new RuntimeException("파일이 존재하지 않습니다.");
		}

		FileSystemResource resource = new FileSystemResource(filePath);
		return ResponseEntity.ok()
				.header(HttpHeaders.CONTENT_DISPOSITION,
						"attachment; filename=\"" + envelope.getOriginalFileName() + "\"")
				.contentType(MediaType.APPLICATION_OCTET_STREAM).body(resource);
	}

	public String verifyAndDecryptEnvelope(Long envelopeId, String username) throws Exception {
		User user = userRepository.findByUsername(username).orElseThrow(() -> new RuntimeException("사용자를 찾을 수 없습니다."));

		KeyPairEntity keyPairEntity = keyRepository.findByUser(user)
				.orElseThrow(() -> new RuntimeException("키쌍이 존재하지 않습니다."));

		PrivateKey privateKey = RSAUtil.readPrivateKeyFromPem(keyPairEntity.getPrivateKey());
		PublicKey publicKey = RSAUtil.readPublicKeyFromPem(keyPairEntity.getPublicKey());

		Envelope envelope = envelopeRepository.findById(envelopeId)
				.orElseThrow(() -> new RuntimeException("해당 봉투를 찾을 수 없습니다."));

		boolean isUploader = envelope.getUploaderUsername().equals(username);
		boolean isReceiver = username.equals(envelope.getReceiverUsername());

		if (!(isUploader || isReceiver)) {
			throw new RuntimeException("접근 권한이 없습니다.");
		}

		Path filePath = Paths.get(uploadDir).resolve(envelope.getStoredFileName().replace("envelopes/", ""));
		if (!Files.exists(filePath)) {
			throw new RuntimeException("파일이 존재하지 않습니다.");
		}

		String encryptedContent = Files.readString(filePath);

		byte[] aesKeyBytes = RSAUtil.decryptWithPrivateKey(Base64.getDecoder().decode(envelope.getAesKeyEncrypted()),
				privateKey);
		SecretKey aesKey = AESUtil.decodeKeyFromBase64(new String(aesKeyBytes));

		String decryptedContent = AESUtil.decrypt(encryptedContent, aesKey);

		boolean isValid = RSAUtil.verifySignature(encryptedContent, envelope.getSignature(), publicKey);
		if (!isValid) {
			throw new RuntimeException("서명 검증 실패: 데이터가 변조되었을 가능성이 있습니다.");
		}

		return decryptedContent;
	}

	@Transactional
	public void transferEnvelope(EnvelopeTransferRequest request, String senderUsername) {
		Envelope envelope = envelopeRepository.findById(request.getEnvelopeId())
				.orElseThrow(() -> new RuntimeException("봉투를 찾을 수 없습니다."));

		if (!envelope.getUploaderUsername().equals(senderUsername)) {
			throw new RuntimeException("본인이 업로드한 봉투만 전달할 수 있습니다.");
		}
		
		User receiver = userRepository.findByUsername(request.getReceiverUsername())
	            .orElseThrow(() -> new IllegalArgumentException("수신자 계정을 찾을 수 없습니다."));

		envelope.setReceiverUsername(receiver.getUsername());
		
//		Envelope copy = Envelope.builder()
//				.originalFileName(original.getOriginalFileName())
//				.storedFileName(original.getStoredFileName())
//				.uploadTime(LocalDateTime.now())
//				.signature(original.getSignature())
//				.aesKeyEncrypted(original.getAesKeyEncrypted())
//				.uploaderUsername(senderUsername)
//				.receiverUsername(receiver.getUsername())
//				.build();

		envelopeRepository.save(envelope);
	}

	public ResponseEntity<Resource> downloadEnvelopeFile(Long envelopeId, String requesterUsername) {
		Envelope envelope = envelopeRepository.findById(envelopeId)
				.orElseThrow(() -> new RuntimeException("해당 봉투를 찾을 수 없습니다."));

		boolean isOwner = envelope.getUploaderUsername().equals(requesterUsername);
		boolean isReceiver = requesterUsername.equals(envelope.getReceiverUsername());

		if (!(isOwner || isReceiver)) {
			throw new RuntimeException("해당 파일에 접근할 권한이 없습니다.");
		}

		File file = new File(uploadDir, envelope.getStoredFileName());
		if (!file.exists()) {
			throw new RuntimeException("파일이 존재하지 않습니다.");
		}

		Resource resource = new FileSystemResource(file);
		return ResponseEntity.ok().contentType(MediaType.APPLICATION_OCTET_STREAM)
				.header(HttpHeaders.CONTENT_DISPOSITION,
						"attachment; filename=\"" + envelope.getOriginalFileName() + "\"")
				.body(resource);
	}

	public List<String> searchUserByKeyword(String keyword) {
		return userRepository.findByUsernameContaining(keyword).stream().map(User::getUsername).toList();
	}

}
